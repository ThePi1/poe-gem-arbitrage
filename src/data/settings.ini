# Settings
# For true/false entries, put either True, or False. No quotes. Not case sensitive. You can even say 'on' / 'off', if you're crazy.
# For all other settings (strings or numbers) no need to put any quotes. Just the number or the string.
# For example: 'max_results = 32', 'print_trades = True', or 'gem_file = data/gems.csv'.

[general]
# How old can poe.ninja data be before we refresh? (int, in seconds)
max_data_staleness = 180

# Print trades in the console after calculations? (True/False)
print_trades = True

# Print corrupt operations in the console after calculations? (True/False)
print_corrupts = True

# Print Vivid Watcher / Awakened Gem flips?
print_watchers = True

# Enable debug messages? (True/False)
debug_messages = True

# Display how many results for gem / corrupt operations in the console? (int)
max_results = 50

# Pull currency prices (regrading lenses, divine) from poe.ninja? (True/False)
# You probably want this off if you're using it heavily. Bulk lens buys will diverge in price from poe.ninja.
# When false, this uses the currency prices in the market settings section.
pull_currency_prices = True

# Reverse the order of listings in the console so that the most profitable ones are on the bottom?
reverse_console_listings = False

# Don't display a corrupt operation if the start gem is less valuable than this (price in chaos)
corrupt_operation_price_floor = 50

# Don't display a gem operation / trade if it is less than this profitable (price in chaos)
gem_operation_price_floor = 0

# What is the minimum number of data points from poe.ninja to use display a trade containing it? (int)
# (Consider this a low confidence bound)
low_confidence_count = 3

# Which method to use when sorting and displaying lens trades? (M1/M2)
# Method 1 (M1) - Sort and display trades based on the total profit per success.
# Method 2 (M2) - Sort and display trades based on the profit per lens use.
lens_sort_method = M2

# Display 'single-lens' trades? (True/False)
display_single_lens_trades = True

# Display 'repeat-until-success' trades? (True/False)
display_repeat_lens_trades = True

# Display primary lens trades AKA skill gems? (True/False)
display_primary_lens_trades = True

# Display secondary lens trades AKA support gems? (True/False)
display_secondary_lens_trades = True

[filepaths]
# Filepaths for data files used -- edit if needed, but you shouldn't have to
ninja_json_filename = data/skillgem_response.json
ninja_json_currency_filename = data/currency_response.json
gem_file = data/gems.csv
vivid_watcher_file = data/vivid_watcher.csv
simulated_weight_filename = data/m_weights.json
version_file = data/version.txt

# API URLs, these will need to be updated each league
# If you fork this repo, you'll need to change the version_url to match your new repository.
api_url = https://poe.ninja/api/data/itemoverview?league=Ancestor&type=SkillGem
cur_api_url = https://poe.ninja/api/data/currencyoverview?league=Ancestor&type=Currency
version_url = https://raw.githubusercontent.com/ThePi1/poe-gem-arbitrage/main/src/data/version.txt
project_url = https://github.com/ThePi1/poe-gem-arbitrage

[market_settings]
# When pull_currency_prices is off, the following prices for currency are used
# If you're buying lenses in bulk (or need to evaluate if it would be profitable to do so), this can be very helpful.
prime_lens_price = 125
secondary_lens_price = 450
divine_price = 200

# These are manually set (for now) regardless.
vivid_watcher_price = 150
yellow_beast_price = 3